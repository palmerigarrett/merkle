{"version":3,"sources":["components/request/fetchRequest.js","components/confirmation/Confirmation.js","components/utils/validString.js","components/registration/UserForm.js","components/utils/validZip.js","App.js","reportWebVitals.js","index.js"],"names":["doFetch","request","a","url","body","type","data","res","undefined","error","errorMessage","fetch","method","headers","mode","response","json","ok","console","log","JSON","stringify","Confirmation","props","show","message","header","button","close","variant","Modal","onHide","backdrop","keyboard","animation","Header","Body","Footer","Button","onClick","validString","value","replace","length","useState","React","UserForm","initialFormState","firstName","lastName","addressOne","addressTwo","city","state","zipcode","country","formState","setFormState","validState","setValidState","errorState","setErrorState","confirmState","setConfirmState","setError","buttonText","modalObj","setModalObj","handleInputChange","e","preventDefault","id","target","val","requestBody","fetchRequest","Container","fluid","Row","className","Form","Group","Col","xs","lg","Label","Control","onChange","placeholder","Text","muted","name","as","map","span","offset","allValid","isValidFirstName","isValidLastName","isValidAddressOne","isValidCity","isValidZip","isValidState","isValidCountry","toUpperCase","validateForm","registerUser","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c755ba20.chunk.js","sourcesContent":["export default async function doFetch(request) {\n  const url = request.url ? request.url : ''\n  const body = request.body ? request.body : ''\n  const type = request.type ? request.type : ''\n  let data = {\n      res: undefined,\n      error: false,\n      errorMessage: ''\n  }\n\n  if (type === \"GET\") {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        mode: 'cors',\n      })\n      const res = await response.json()\n      if (res && response.ok) {\n        console.log('res', res)\n        data.res = res\n        return data\n      } else {\n        data.res = res\n        data.error = true\n        data.errorMessage = res['error']\n        return data\n      }\n    } catch (error) {\n      data.error = true\n      data.errorMessage = error\n      return data\n    }\n  } else {\n    try {\n      const response = await fetch(url, {\n        method: `${type}`,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n        mode: 'cors',\n      })\n      const res = await response.json()\n      if (res && response.ok) {\n        data.res = res\n        return data\n      } else {\n          data.res = res\n        data.error = true\n        data.errorMessage = res['error']\n        return data\n      }\n  } catch (error) {\n      data.error = true\n      data.errorMessage = error\n      return data\n    }\n  }\n}\n","import Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\n\nfunction Confirmation(props) {\n  const {show, message, header, button, close, variant} = props\n\n  return (\n    <Modal\n        show={show}\n        onHide={close}\n        backdrop=\"static\"\n        keyboard={false}\n        animation={false}\n      >\n        <Modal.Header>\n          {header}\n        </Modal.Header>\n        <Modal.Body>\n          <p>\n            {message}\n          </p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant={variant} onClick={close}>\n            {button}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n  )\n}\n\nexport default Confirmation;","export default function validString(value) {\n  if (typeof(value) !== 'string') {\n    return false;\n  }\n  const spaceLessString = value.replace(/\\s/g, '');\n  if (!spaceLessString.length) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}","import React from 'react'\nimport '../../App.css'\n\nimport fetchRequest from '../request/fetchRequest'\nimport Confirmation from '../confirmation/Confirmation'\nimport validString from '../utils/validString'\nimport validZip from '../utils/validZip'\n\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\n\nconst {useState} = React\n\nfunction UserForm() {\n  const initialFormState = {\n    firstName: '',\n    lastName: '',\n    addressOne: '',\n    addressTwo: '',\n    city: '',\n    state: '',\n    zipcode: '',\n    country: ''\n  }\n  const [formState, setFormState] = useState(initialFormState)\n  const initialValidState = {\n    firstName: true,\n    lastName: true,\n    addressOne: true,\n    addressTwo: true,\n    city: true,\n    state: true,\n    zipcode: true,\n    country: true\n  }\n  const [validState, setValidState] = useState(initialValidState)\n  const [errorState, setErrorState] = useState(initialFormState)\n  const [confirmState, setConfirmState] = useState(false)\n  const [error, setError] = useState('')\n  const initialModalObj = {\n    message: '',\n    header: '',\n    buttonText: '',\n    variant: ''\n  }\n  const [modalObj, setModalObj] = useState(initialModalObj)\n  const states = [\n    'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC', 'FL','GA',\n    'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\n    'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\n    'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\n    'VT','VI','VA','WA','WV','WI','WY'\n   ];\n\n  const handleInputChange = (e) => {\n    e.preventDefault()\n    const id = e.target.id\n    const val = e.target.value\n    setFormState({\n      ...formState,\n      [id] : val,\n    })\n  }\n\n  const handleStateSelect = (e) => {\n    e.preventDefault()\n    const name = e.target.name\n    const val = e.target.value\n    setFormState({\n      ...formState,\n      [name] : val,\n    })\n  }\n\n  function validateForm() {\n    let allValid = true\n    let isValidFirstName = true\n    let isValidLastName = true\n    let isValidAddressOne = true\n    let isValidCity = true\n    let isValidZip = true\n    let isValidState = true\n    let isValidCountry = true\n\n    if (!validString(formState.firstName)) { isValidFirstName = false; allValid = false }\n    if (!validString(formState.lastName)) { isValidLastName = false; allValid = false }\n    if (!validString(formState.addressOne)) { isValidAddressOne = false; allValid = false }\n    if (!validString(formState.city)) { isValidCity = false; allValid = false }\n    if (!validZip(formState.zipcode)) {isValidZip = false; allValid = false}\n    if (formState.state === '' ) { isValidState = false; allValid = false }\n    if (formState.country.toUpperCase() !== 'US') { isValidCountry = false; allValid = false }\n\n    setValidState({\n      firstName: isValidFirstName,\n      lastName: isValidLastName,\n      addressOne: isValidAddressOne,\n      city: isValidCity,\n      zipcode: isValidZip,\n      state: isValidState,\n      country: isValidCountry\n    })\n\n    setErrorState({\n      ...errorState,\n      firstName: isValidFirstName ? '' : 'Please enter a valid name.',\n      lastName: isValidLastName ? '' : 'Please enter a valid name.',\n      addressOne: isValidAddressOne ? '' : 'Please enter a valid address.',\n      city: isValidCity ? '' : 'Please enter a valid city.',\n      state: isValidState ? '' : 'Please enter a valid state.',\n      zipcode: isValidZip ? '' : 'Please enter a valid zipcode.',\n      country: isValidCountry ? '' : 'Please enter \"US\"',\n    })\n\n    return allValid\n\n  }\n\n  async function registerUser() {\n    const route = 'https://0sjhqfet72.execute-api.us-east-1.amazonaws.com/dev/api/register'\n    const requestBody = formState\n\n    const data = await fetchRequest({url: route, body: requestBody, type: 'POST'})\n    if (data.error) {\n      setError(data.error)\n      setModalObj({\n        message: 'Oops, there seems to have been an error.',\n        header: 'Try again.',\n        buttonText: 'Retry',\n        variant: 'danger'\n      })\n    } else {\n      setFormState(initialFormState)\n      setConfirmState(true)\n      setModalObj({\n        message: 'Thanks for submitting a new user!.',\n        header: 'Create Another User',\n        buttonText: 'Create New User',\n        variant: 'dark'\n      })\n    }\n  }\n\n  function handleSubmit() {\n    const isValid = validateForm()\n    if (isValid) {\n      registerUser(formState)\n    }\n  }\n  \n  function handleCancel() {\n    setFormState(initialFormState)\n  }\n\n  function closeModal() {\n    setConfirmState(false)\n  }\n\n  return (\n    <>\n      <Confirmation\n        show={confirmState || error}\n        message={modalObj.message}\n        header={modalObj.header}\n        close={closeModal}\n        button={modalObj.buttonText}\n        variant={modalObj.variant}\n      />\n      <Container fluid>\n        <Row className=\"justify-content-md-center\">\n          <h1>Submit User Info</h1>\n        </Row>\n          <Form>\n            <Form.Group >\n              <Row className=\"justify-content-md-center\">\n                <Col xs lg='4'>\n                  <Form.Label>First Name: </Form.Label>\n                  <Form.Control id='firstName' value={formState.firstName} onChange={handleInputChange} type='text' placeholder='example: John'/>\n                  <Form.Text className=\"warningText\" muted>\n                    {validState.firstName ? '' : errorState.firstName}\n                  </Form.Text>\n                </Col>\n                <Col xs lg='4'>\n                  <Form.Label>Last Name: </Form.Label>\n                  <Form.Control id='lastName' value={formState.lastName} onChange={handleInputChange} type='text' placeholder='example: Smith'/>\n                  <Form.Text className=\"warningText\" muted>\n                    {validState.lastName ? '' : errorState.lastName}\n                  </Form.Text>\n                </Col>\n              </Row>\n              <Row className=\"justify-content-md-center\">\n                <Col xs lg='4'>\n                  <Form.Label>Address 1: </Form.Label>\n                  <Form.Control id='addressOne' value={formState.addressOne} onChange={handleInputChange} type='text' placeholder='example: 123 Washington Avenue'/>\n                  <Form.Text className=\"warningText\" muted>\n                    {validState.addressOne ? '' : errorState.addressOne}\n                  </Form.Text>\n                  <Form.Label>Address 2: </Form.Label>\n                  <Form.Control id='addressTwo' value={formState.addressTwo} onChange={handleInputChange} type='text' placeholder='example: Apt 1'/>\n                  <Form.Text className=\"warningText\" muted>\n                  </Form.Text>\n                  <Form.Label>City: </Form.Label>\n                  <Form.Control id='city' value={formState.city} onChange={handleInputChange} type='text' placeholder='example: New York City'/>\n                  <Form.Text className=\"warningText\" muted>\n                    {validState.city ? '' : errorState.city}\n                  </Form.Text>\n                </Col>\n                <Col xs lg='4'>\n                  <Form.Label>Zip: </Form.Label>\n                  <Form.Control id='zipcode' value={formState.zipcode} onChange={handleInputChange} type='text' placeholder='example: 5 or 9 digits'/>\n                  <Form.Text className=\"warningText\" muted>\n                    {validState.zipcode ? '' : errorState.zipcode}\n                  </Form.Text>\n                  <Form.Label>State: </Form.Label>\n                  <Form.Control  name='state' value={formState.state} onChange={handleStateSelect} as='select'>\n                    <option>Please Select a State</option>\n                    {states.map(state =>\n                      <option key={state}>{state}</option>\n                    )}\n                  </Form.Control>\n                  <Form.Text className=\"warningText\" muted>\n                    {validState.state ? '' : errorState.state}\n                  </Form.Text>\n                  <Form.Label>Country: </Form.Label>\n                  <Form.Control id='country' value={formState.country} onChange={handleInputChange} type='text' placeholder='example: Please Enter \"US\"'/>\n                  <Form.Text className=\"warningText\" muted>\n                    {validState.country ? '' : errorState.country}\n                  </Form.Text>\n                </Col>\n              </Row>\n            </Form.Group>\n            <Row className='buttons'>\n              <Col xs lg={{ span: 4, offset: 8 }}>\n                <Button className='button' variant='secondary' onClick={handleCancel}>Clear Form</Button>\n                <Button className='button' variant='dark' onClick={handleSubmit}>Submit</Button>\n              </Col>\n            </Row>\n          </Form>\n      </Container>\n  </>\n  )\n}\n\nexport default UserForm;","export default function validString(value) {\n  if (!value) {\n    return false\n  }\n  if (value.length < 5) {\n    return false\n  }\n  if (value.length > 5 && value.length !== 9) {\n    return false\n  } else {\n    return true\n  }\n}","import './App.css';\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport UserForm from './components/registration/UserForm'\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Route path='/merkle'>\n          <UserForm />\n        </Route>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}